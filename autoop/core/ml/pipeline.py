from typing import List
import pickle

from autoop.core.ml.artifact import Artifact
from autoop.core.ml.dataset import Dataset
from autoop.core.ml.model import Model
from autoop.core.ml.feature import Feature
from autoop.core.ml.metric import Metric
from autoop.functional.preprocessing import preprocess_features
import numpy as np
from typing import Any


class Pipeline:
    """
    A class representing a machine learning pipeline.

    This class is responsible for managing the lifecycle of a pipeline, including
    preprocessing, training, evaluating, and saving the model and artifacts.
    """

    def __init__(
        self,
        metrics: List[Metric],
        dataset: Dataset,
        model: Model,
        input_features: List[Feature],
        target_feature: Feature,
        split: int = 0.8,
    ) -> None:
        """
        Initializes the pipeline with the given metrics, dataset, model, features, and split ratio.

        Args:
            metrics (List[Metric]): The list of metrics to evaluate the model.
            dataset (Dataset): The dataset to be used in the pipeline.
            model (Model): The machine learning model to be used.
            input_features (List[Feature]): The input features for the model.
            target_feature (Feature): The target feature for prediction.
            split (float, optional): The ratio of data to use for training (default is 0.8).
        
        Raises:
            ValueError: If the target feature type does not match the model type.
        """
        self._dataset = dataset
        self._model = model
        self._input_features = input_features
        self._target_feature = target_feature
        self._metrics = metrics
        self._artifacts = {}
        self._split = split
        if (target_feature.type == "categorical" and (
                model.type != "classification")):
            raise ValueError(
                """Model type must be classification
                for categorical target feature"""
            )
        if target_feature.type == "continuous" and model.type != "regression":
            raise ValueError(
                "Model type must be regression for continuous target feature"
            )

    def __str__(self) -> str:
        """
        Returns a string representation of the pipeline, including model type, features, and metrics.

        Returns:
            str: The string representation of the pipeline.
        """
        return f"""
Pipeline(
    model={self._model.type},
    input_features={list(map(str, self._input_features))},
    target_feature={str(self._target_feature)},
    split={self._split},
    metrics={list(map(str, self._metrics))},
)
"""

    @property
    def model(self) -> Model:
        """
        Returns the model used in the pipeline.

        Returns:
            Model: The model used in the pipeline.
        """
        return self._model

    @property
    def artifacts(self) -> List[Artifact]:
        """
        Returns the artifacts generated during the pipeline execution.

        Returns:
            List[Artifact]: The list of artifacts generated by the pipeline.
        """
        artifacts = []
        for name, artifact in self._artifacts.items():
            artifact_type = artifact.get("type")
            if artifact_type in ["OneHotEncoder"]:
                data = artifact["encoder"]
                data = pickle.dumps(data)
                artifacts.append(Artifact(name=name, data=data))
            if artifact_type in ["StandardScaler"]:
                data = artifact["scaler"]
                data = pickle.dumps(data)
                artifacts.append(Artifact(name=name, data=data))
        pipeline_data = {
            "input_features": self._input_features,
            "target_feature": self._target_feature,
            "split": self._split,
        }
        artifacts.append(
            Artifact(name="pipeline_config", data=pickle.dumps(pipeline_data))
        )
        artifacts.append(
            self._model.to_artifact(name=f"pipeline_model_{self._model.type}")
        )
        return artifacts

    def _register_artifact(self, name: str, artifact: Artifact) -> None:
        """
        Registers an artifact to be used in the pipeline.

        Args:
            name (str): The name of the artifact.
            artifact (Artifact): The artifact to be registered.
        """
        self._artifacts[name] = artifact

    def _preprocess_features(self) -> None:
        """
        Preprocesses the input and target features, storing the results as artifacts.

        This step involves transforming raw features into usable formats for training and evaluation.
        """
        (target_feature_name, target_data, artifact) = preprocess_features(
            [self._target_feature], self._dataset
        )[0]
        self._register_artifact(target_feature_name, artifact)
        input_results = preprocess_features(self._input_features,
                                            self._dataset)
        for feature_name, data, artifact in input_results:
            self._register_artifact(feature_name, artifact)
        self._output_vector = target_data
        self._input_vectors = [
            data for (feature_name, data, artifact) in input_results]

    def _split_data(self) -> np.ndarray:
        """
        Splits the data into training and testing sets based on the split ratio.
        """
        split = self._split
        self._train_X = [
            vector[: int(split * len(vector))]
            for vector in self._input_vectors
        ]
        self._test_X = [
            vector[int(split * len(vector)):]
            for vector in self._input_vectors
        ]
        self._train_y = self._output_vector[
            : int(split * len(self._output_vector))]
        self._test_y = self._output_vector[
            int(split * len(self._output_vector)):]

    def _compact_vectors(self, vectors: List[np.array]) -> np.array:
        """
        Combines several feature vectors into a compact vector by concatenating them.

        Args:
            vectors (List[np.array]): A list of feature vectors.

        Returns:
            np.array: The concatenated feature vectors.
        """
        return np.concatenate(vectors, axis=1)

    def _train(self) -> None:
        """
        Trains the model on the training data.
        """
        X = self._compact_vectors(self._train_X)
        Y = self._train_y
        self.model.fit(X, Y)

    def _evaluate(self) -> None:
        """
        Evaluates the model on the test data using the specified metrics.
        """
        X = self._compact_vectors(self._test_X)
        Y = self._test_y
        self._metrics_results = []
        predictions = self.model.predict(X)
        for MetricUsed in self._metrics:
            metric = MetricUsed()
            result = metric(predictions, Y)
            self._metrics_results.append((metric, result))
        self._predictions = predictions

    def execute(self) -> dict[str, Any]:
        """
        Executes the entire pipeline: preprocess, train, evaluate, and return results.
        
        Returns:
            dict[str, Any]: A dictionary containing the metrics and predictions for training and testing.
        """
        self._preprocess_features()
        self._split_data()
        self._train()

        self._evaluate()

        original_test_X, original_test_y = self._test_X, self._test_y
        self._test_X, self._test_y = self._train_X, self._train_y
        self._evaluate()
        train_metrics_results, train_predictions = (
            self._metrics_results,
            self._predictions,
        )

        self._test_X, self._test_y = original_test_X, original_test_y
        self._evaluate()
        test_metrics_results, test_predictions = (
            self._metrics_results,
            self._predictions,
        )

        return {
            "train_metrics": train_metrics_results,
            "train_predictions": train_predictions,
            "test_metrics": test_metrics_results,
            "test_predictions": test_predictions,
        }
